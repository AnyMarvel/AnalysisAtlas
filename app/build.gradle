group = "com.atlas.demo"
version = getEnvValue("versionName", "1.0.1");
def apVersion = getEnvValue("apVersion", "");

apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'//依赖atlas-pulgin组件
apply plugin: 'com.taobao.atlas.dexpatch'
android {
    compileSdkVersion 25
    buildToolsVersion "25.0.0"
    defaultConfig {
        applicationId "com.atlas.analysis"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            ndk {
                abiFilters "x86","armeabi"
            }

        }

    }
}

atlas {

    atlasEnabled true
    tBuildConfig {
//        autoStartBundles = ['com.taobao.firstbundle'] //自启动bundle配置
        preLaunch = 'com.atlas.analysis.AtlasLaunch' //AppApplication启动之前调用
        outOfApkBundles = ['remotebundle']

    }
    patchConfigs {
        debug {
            createTPatch true
        }
    }
    manifestOptions {
        addAtlasProxyComponents true
    }
    buildTypes {
        debug {
            if (apVersion) {
                baseApDependency "com.taobao.android.atlasdemo:AP-debug:${apVersion}@ap"
                patchConfig patchConfigs.debug
            }
        }
    }
}

String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;bundleCompile
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:25.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    //依赖atlas-core引擎代码组件
    compile 'com.taobao.android:atlas_core:5.0.7.55@aar'
    //依赖atlas-update更新代码组件
    compile 'com.taobao.android:atlasupdate:1.1.4.14@aar'
    bundleCompile project(':firstbundle')
    compile 'com.alibaba:fastjson:1.1.45.android@jar'
    bundleCompile project(':remotebundle')
}
apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    // 指定仓库位置
    repositories {
        mavenLocal()
    }
    publications {
        // 默认本地仓库地址  用户目录/.m2/repository/
        maven(MavenPublication) {
            //读取ap目录上传maven
            artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
            //生成本地maven目录
            groupId group
            artifactId "AP-debug"
        }
    }
}